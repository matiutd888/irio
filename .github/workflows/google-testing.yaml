# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "master" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE test environment

on:
  push:
    branches: ["*"]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1
  GKE_CLUSTER: alerting-platform-test
  GKE_ZONE: us-central1
  REPOSITORY: alerting-platform

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: test

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # # Configure Workload Identity Federation and generate an access token.
      # - id: 'auth'
      #   name: 'Authenticate to Google Cloud'
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     token_format: 'access_token'
      #     workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
      #     service_account: ' github@blep-runner.iam.gserviceaccount.com '

      # Alternative option - authentication via credentials json
      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          token_format: "access_token"
          credentials_json: '{"type": "service_account", "project_id": "semiotic-mender-401510", "private_key_id": "a0ef875ec12e74841d87df1afcfdad1972c31c82", "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC93CnapRGl/uE+\ni7qKa7JPNWvw3LD4F6F9LqJJ3eqxoUgq3NhYIRt48EAmprbHNmHYWSw2rE+8fIai\nhSM2LNOE1mH57glyD8Fxy2PWaX2rCfi5pz1dK115C2B86N1MTyv/ayWv62aHhRBE\npyEoIveE0EIGSut67mUXm0no6JiEsuo8/lLcSkOxP8pVM2cLUxp1t956o42x4Nbk\nSc11cp4ZxKeYjqX0+P4R+Utnff0UVtE11T3kv8/XMlVG3FT1kbPo9NWZjju4gZ2H\nsj41GjgHA0wCU5BOQitRyIH6I6NHiD0oEX+pamPjD6Kqwh5iSy0f6zmT+QiHeo4V\nUai1FZt1AgMBAAECggEAOkqx+QTsVbxbOMJa3Cvzu5kJ0pJXrVxIAzDBuA8wAyij\nCTH0JJ7JmgidkaBnBuP+B5hdWE3wT00mYxigdn4t1R+jRkKc2M3YlVEejpKl+FEf\n8hRUZVouoT7qeX9fjpHSTuH9WLVcLeifVYzAw9t0hm0QkHEJOp2eITDW8PEU/syO\ndhW10wqgFVtfgbcGmO9O9Rl8V33YUGkF0r2eDG1WQy4wLAPccj7T53fXSEdMvgd1\nvXUmYQJI2qFlNOGXY/bpYTDWrxKhQtxhZsXwsIfcOuGsEyXIeFwJr8o91qwUNRkg\nsu61CA/Dqvtm0tyrecswKx+AmXuxosYG+Addi9ST4wKBgQDfO7V+QJKYByDakhve\nJRJfuKnpFPBiW9+RAKBwxHS0b5rsco2WI2215sobRA51B3maKRdcQRqdfZnJKQYL\nAFSdUchhQxd9WBoGr1TzuZK4W9gSUdOnjgT/RX6FnE3ESHakTZntOxiy3XwaKPZP\nvY4Y0DLfKXvRDQmpClNbH4kYuwKBgQDZumkTzhzdi0z2c/6TP/Y9RlBvfBOl5z4+\nXeiSOLtdPNF8+5LQSu2Oe7wr61i4KDCfJ4ZA4SHPndF4hsOJ3QlDpy6x+vvLIzgm\nNyaO7luDUsXQLQtHUskOwzRN/x2sWFIVsBbD7nviKP00REAGXPLYkwcHEDYe5f8o\nLhJt738xjwKBgHREjxUA4NlZ7RyqOOWM/XLppWWGyGUSYPEPGIFjcT2BW3mHeIMY\nVM4HNIDbA4SkrgtDF62vIwOgJXcGbOVR+MAvlmRCI3vfZT7SFzcSEn7/JxzzjX+Z\nkrS6J1nDvSVccJ7G5EMRIp4Wicq+RvvlSJtX5QcifiC137AxdpThafB9AoGBAMLM\nWDTjBMpmVm5t60e9Q0chQNft7/pQAU11YZ5paaEKx/cFch4v24jORdYZk1/4fT/3\n8dLcWg7SCVbHY+1VuHMyAcI1ZtAha5wtXa8lrPS6usb9dgjTFZXCqmpaJSdMQeyr\nhkK4fVgkCh6YLZxDzvZb3T7Bj1pntrkxN0XqsCcbAoGBAKEEMRz09KeQ0rlhGspW\nWl84YNk2kRnPOzq+K2CHGsvu6a2b6q293G0RTimzxbt3rmCGOV7yAcjrbO+Du4aY\nscFYo7GYjuFI6ssohRDz4aXkhxh+EbcvA5A2UXRTxX+K5lczCBTPl6hUoVWiOFNb\n8BK0bkaq23fKY6XIS6HXERML\n-----END PRIVATE KEY-----\n", "client_email": "githubrunner@semiotic-mender-401510.iam.gserviceaccount.com", "client_id": "117354093924252422384", "auth_uri": "https://accounts.google.com/o/oauth2/auth", "token_uri": "https://oauth2.googleapis.com/token", "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs", "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/githubrunner%40semiotic-mender-401510.iam.gserviceaccount.com", "universe_domain": "googleapis.com"}'

      - name: Docker configuration
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Build the Docker image
      - name: Build
        run: |-
          docker build --file services/healthcheck/Dockerfile \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/healthcheck:latest" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            services/healthcheck/
          docker build --file services/notification/Dockerfile \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/notification:latest" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            services/notification/
          docker build --file configuration_scripts/Dockerfile  \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/configuration:latest" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            configuration_scripts/
          docker build --file service_test/Dockerfile  \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/testing-service:latest" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            service_test/

      # Push the Docker image to Google Artifact Registry
      - name: Publish
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/healthcheck:latest"
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/notification:latest"
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/configuration:latest"
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/testing-service:latest"
      # Deploy
      - name: Deploy
        run: |-
          cd deployment/kubernetes-resources
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

          # replacing the image name in the k8s template
          ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY
          ./kustomize build . | kubectl apply -f -
          kubectl port-forward service/configuration-svc 8000:8000

      - name: Deploy testing service
        run: |-
          cd ../kubernetest-test-resources/

          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

          ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY
          ./kustomize build . | kubectl apply -f -

          kubectl port-forward service/testing-service-svc 8001:8001
